#version 130
#extension GL_ARB_shading_language_packing : enable
#extension GL_ARB_gpu_shader5 : enable

uniform sampler2D InputTexture;
uniform uvec4 Const0;
uniform uvec4 Const1;
uniform uvec4 Const2;
uniform uvec4 Const3;

in vec2 Frag_UV;
in vec4 Frag_Color;
out vec4 Out_Color;

#define A_GPU 1
#define A_GLSL 1

#define SAMPLE_EASU 1
#define SAMPLE_SLOW_FALLBACK 1

<include_fsr_ffx_a>

#if SAMPLE_EASU
	#define FSR_EASU_F 1
	AF4 FsrEasuRF(AF2 p) { AF4 res = textureGather(InputTexture, p, 0); return res; }
	AF4 FsrEasuGF(AF2 p) { AF4 res = textureGather(InputTexture, p, 1); return res; }
	AF4 FsrEasuBF(AF2 p) { AF4 res = textureGather(InputTexture, p, 2); return res; }
#endif
#if SAMPLE_RCAS
	#define FSR_RCAS_F
	AF4 FsrRcasLoadF(ASU2 p) { return texelFetch(InputTexture, ASU2(p), 0); }
	void FsrRcasInputF(inout AF1 r, inout AF1 g, inout AF1 b) {}
#endif

<input_fsr1>

void main()
{
	AF3 c;
	FsrEasuF(c, uvec2(Frag_UV * textureSize(InputTexture, 0)), Const0, Const1, Const2, Const3);
	c.r = pow(c.r, 0.75);
	c.g = pow(c.g, 0.75);
	c.b = pow(c.b, 0.75);
	Out_Color = AF4(c, 1);
}
