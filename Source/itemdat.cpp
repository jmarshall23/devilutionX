/**
 * @file itemdat.cpp
 *
 * Implementation of all item data.
 */

#include "itemdat.h"
#include "utils/language.h"

#include "datatable.h"

namespace devilution {
	#define ITEM_STRING_TO_ID(x) \
	if (str == #x) {        \
		return x;           \
	}

	item_drop_rate ItemDropRateFromText(std::string str)
	{
		ITEM_STRING_TO_ID(IDROP_NEVER)
		ITEM_STRING_TO_ID(IDROP_REGULAR)
		ITEM_STRING_TO_ID(IDROP_DOUBLE)

		devilution::app_fatal("Invalid item drop rate! %s", str.c_str());
	    return IDROP_NEVER;
	}

	item_class ItemClassFromText(std::string str)
    {
	    ITEM_STRING_TO_ID(ICLASS_NONE)
	    ITEM_STRING_TO_ID(ICLASS_WEAPON)
	    ITEM_STRING_TO_ID(ICLASS_ARMOR)
	    ITEM_STRING_TO_ID(ICLASS_MISC)
	    ITEM_STRING_TO_ID(ICLASS_GOLD)
		ITEM_STRING_TO_ID(ICLASS_QUEST)

		devilution::app_fatal("Invalid item class! %s", str.c_str());
	    return ICLASS_NONE;
	}

	item_equip_type ItemEquipTypeFromText(std::string str)
    {
	    ITEM_STRING_TO_ID(ILOC_NONE)
	    ITEM_STRING_TO_ID(ILOC_ONEHAND)
	    ITEM_STRING_TO_ID(ILOC_TWOHAND)
	    ITEM_STRING_TO_ID(ILOC_ARMOR)
	    ITEM_STRING_TO_ID(ILOC_HELM)
	    ITEM_STRING_TO_ID(ILOC_RING)
	    ITEM_STRING_TO_ID(ILOC_AMULET)
	    ITEM_STRING_TO_ID(ILOC_UNEQUIPABLE)
	    ITEM_STRING_TO_ID(ILOC_BELT)
	    ITEM_STRING_TO_ID(ILOC_INVALID)

		devilution::app_fatal("Invalid equip type! %s", str.c_str());
	    return ILOC_NONE;
	}

	item_type ItemTypeFromText(std::string str)
    {
	    ITEM_STRING_TO_ID(ITYPE_MISC)
	    ITEM_STRING_TO_ID(ITYPE_SWORD)
	    ITEM_STRING_TO_ID(ITYPE_AXE)
	    ITEM_STRING_TO_ID(ITYPE_BOW)
	    ITEM_STRING_TO_ID(ITYPE_MACE)
	    ITEM_STRING_TO_ID(ITYPE_SHIELD)
	    ITEM_STRING_TO_ID(ITYPE_LARMOR)
	    ITEM_STRING_TO_ID(ITYPE_HELM)
	    ITEM_STRING_TO_ID(ITYPE_MARMOR)
	    ITEM_STRING_TO_ID(ITYPE_HARMOR)
	    ITEM_STRING_TO_ID(ITYPE_STAFF)
	    ITEM_STRING_TO_ID(ITYPE_GOLD)
	    ITEM_STRING_TO_ID(ITYPE_RING)
	    ITEM_STRING_TO_ID(ITYPE_AMULET)
		ITEM_STRING_TO_ID(ITYPE_NONE)

		devilution::app_fatal("Invalid item tpye! %s", str.c_str());
	    return ITYPE_NONE;
	}

	item_cursor_graphic ItemCursorGraphicFromText(std::string str)
    {
		ITEM_STRING_TO_ID(ICURS_POTION_OF_FULL_MANA)
		ITEM_STRING_TO_ID(ICURS_SCROLL_OF)
		ITEM_STRING_TO_ID(ICURS_GOLD_SMALL)
		ITEM_STRING_TO_ID(ICURS_GOLD_MEDIUM)
		ITEM_STRING_TO_ID(ICURS_GOLD_LARGE)
		ITEM_STRING_TO_ID(ICURS_RING_OF_TRUTH)
		ITEM_STRING_TO_ID(ICURS_RING)
		ITEM_STRING_TO_ID(ICURS_SPECTRAL_ELIXIR)
		ITEM_STRING_TO_ID(ICURS_GOLDEN_ELIXIR)
		ITEM_STRING_TO_ID(ICURS_EMPYREAN_BAND)
		ITEM_STRING_TO_ID(ICURS_EAR_SORCERER)
		ITEM_STRING_TO_ID(ICURS_EAR_WARRIOR)
		ITEM_STRING_TO_ID(ICURS_EAR_ROGUE)
		ITEM_STRING_TO_ID(ICURS_BLOOD_STONE)
		ITEM_STRING_TO_ID(ICURS_OIL)
		ITEM_STRING_TO_ID(ICURS_ELIXIR_OF_VITALITY)
		ITEM_STRING_TO_ID(ICURS_POTION_OF_HEALING)
		ITEM_STRING_TO_ID(ICURS_POTION_OF_FULL_REJUVENATION)
		ITEM_STRING_TO_ID(ICURS_ELIXIR_OF_MAGIC)
		ITEM_STRING_TO_ID(ICURS_POTION_OF_FULL_HEALING)
		ITEM_STRING_TO_ID(ICURS_ELIXIR_OF_DEXTERITY)
		ITEM_STRING_TO_ID(ICURS_POTION_OF_REJUVENATION)
		ITEM_STRING_TO_ID(ICURS_ELIXIR_OF_STRENGTH)
		ITEM_STRING_TO_ID(ICURS_POTION_OF_MANA)
		ITEM_STRING_TO_ID(ICURS_BRAIN)
		ITEM_STRING_TO_ID(ICURS_OPTIC_AMULET)
		ITEM_STRING_TO_ID(ICURS_AMULET)
		ITEM_STRING_TO_ID(ICURS_DAGGER)
		ITEM_STRING_TO_ID(ICURS_BLADE)
		ITEM_STRING_TO_ID(ICURS_BASTARD_SWORD)
		ITEM_STRING_TO_ID(ICURS_MACE)
		ITEM_STRING_TO_ID(ICURS_LONG_SWORD)
		ITEM_STRING_TO_ID(ICURS_BROAD_SWORD)
		ITEM_STRING_TO_ID(ICURS_FALCHION)
		ITEM_STRING_TO_ID(ICURS_MORNING_STAR)
		ITEM_STRING_TO_ID(ICURS_SHORT_SWORD)
		ITEM_STRING_TO_ID(ICURS_CLAYMORE)
		ITEM_STRING_TO_ID(ICURS_CLUB)
		ITEM_STRING_TO_ID(ICURS_SABRE)
		ITEM_STRING_TO_ID(ICURS_SPIKED_CLUB)
		ITEM_STRING_TO_ID(ICURS_SCIMITAR)
		ITEM_STRING_TO_ID(ICURS_FULL_HELM)
		ITEM_STRING_TO_ID(ICURS_MAGIC_ROCK)
		ITEM_STRING_TO_ID(ICURS_THE_UNDEAD_CROWN)
		ITEM_STRING_TO_ID(ICURS_HELM)
		ITEM_STRING_TO_ID(ICURS_BUCKLER)
		ITEM_STRING_TO_ID(ICURS_VIEL_OF_STEEL)
		ITEM_STRING_TO_ID(ICURS_BOOK_GREY)
		ITEM_STRING_TO_ID(ICURS_BOOK_RED)
		ITEM_STRING_TO_ID(ICURS_BOOK_BLUE)
		ITEM_STRING_TO_ID(ICURS_BLACK_MUSHROOM)
		ITEM_STRING_TO_ID(ICURS_SKULL_CAP)
		ITEM_STRING_TO_ID(ICURS_CAP)
		ITEM_STRING_TO_ID(ICURS_HARLEQUIN_CREST)
		ITEM_STRING_TO_ID(ICURS_CROWN)
		ITEM_STRING_TO_ID(ICURS_MAP_OF_THE_STARS)
		ITEM_STRING_TO_ID(ICURS_FUNGAL_TOME)
		ITEM_STRING_TO_ID(ICURS_GREAT_HELM)
		ITEM_STRING_TO_ID(ICURS_BATTLE_AXE)
		ITEM_STRING_TO_ID(ICURS_HUNTERS_BOW)
		ITEM_STRING_TO_ID(ICURS_FIELD_PLATE)
		ITEM_STRING_TO_ID(ICURS_SMALL_SHIELD)
		ITEM_STRING_TO_ID(ICURS_CLEAVER)
		ITEM_STRING_TO_ID(ICURS_STUDDED_LEATHER_ARMOR)
		ITEM_STRING_TO_ID(ICURS_SHORT_STAFF)
		ITEM_STRING_TO_ID(ICURS_TWO_HANDED_SWORD)
		ITEM_STRING_TO_ID(ICURS_CHAIN_MAIL)
		ITEM_STRING_TO_ID(ICURS_SMALL_AXE)
		ITEM_STRING_TO_ID(ICURS_KITE_SHIELD)
		ITEM_STRING_TO_ID(ICURS_SCALE_MAIL)
		ITEM_STRING_TO_ID(ICURS_SHORT_BOW)
		ITEM_STRING_TO_ID(ICURS_LONG_WAR_BOW)
		ITEM_STRING_TO_ID(ICURS_WAR_HAMMER)
		ITEM_STRING_TO_ID(ICURS_MAUL)
		ITEM_STRING_TO_ID(ICURS_LONG_STAFF)
		ITEM_STRING_TO_ID(ICURS_WAR_STAFF)
		ITEM_STRING_TO_ID(ICURS_TAVERN_SIGN)
		ITEM_STRING_TO_ID(ICURS_HARD_LEATHER_ARMOR)
		ITEM_STRING_TO_ID(ICURS_RAGS)
		ITEM_STRING_TO_ID(ICURS_QUILTED_ARMOR)
		ITEM_STRING_TO_ID(ICURS_FLAIL)
		ITEM_STRING_TO_ID(ICURS_TOWER_SHIELD)
		ITEM_STRING_TO_ID(ICURS_COMPOSITE_BOW)
		ITEM_STRING_TO_ID(ICURS_GREAT_SWORD)
		ITEM_STRING_TO_ID(ICURS_LEATHER_ARMOR)
		ITEM_STRING_TO_ID(ICURS_SPLINT_MAIL)
		ITEM_STRING_TO_ID(ICURS_ROBE)
		ITEM_STRING_TO_ID(ICURS_ANVIL_OF_FURY)
		ITEM_STRING_TO_ID(ICURS_BROAD_AXE)
		ITEM_STRING_TO_ID(ICURS_LARGE_AXE)
		ITEM_STRING_TO_ID(ICURS_GREAT_AXE)
		ITEM_STRING_TO_ID(ICURS_AXE)
		ITEM_STRING_TO_ID(ICURS_LARGE_SHIELD)
		ITEM_STRING_TO_ID(ICURS_GOTHIC_SHIELD)
		ITEM_STRING_TO_ID(ICURS_CLOAK)
		ITEM_STRING_TO_ID(ICURS_CAPE)
		ITEM_STRING_TO_ID(ICURS_FULL_PLATE_MAIL)
		ITEM_STRING_TO_ID(ICURS_GOTHIC_PLATE)
		ITEM_STRING_TO_ID(ICURS_BREAST_PLATE)
		ITEM_STRING_TO_ID(ICURS_RING_MAIL)
		ITEM_STRING_TO_ID(ICURS_STAFF_OF_LAZARUS)
		ITEM_STRING_TO_ID(ICURS_ARKAINES_VALOR)
		ITEM_STRING_TO_ID(ICURS_SHORT_WAR_BOW)
		ITEM_STRING_TO_ID(ICURS_COMPOSITE_STAFF)
		ITEM_STRING_TO_ID(ICURS_SHORT_BATTLE_BOW)
		ITEM_STRING_TO_ID(ICURS_GOLD)
		ITEM_STRING_TO_ID(ICURS_AURIC_AMULET)
		ITEM_STRING_TO_ID(ICURS_RUNE_BOMB)
		ITEM_STRING_TO_ID(ICURS_THEODORE)
		ITEM_STRING_TO_ID(ICURS_TORN_NOTE_1)
		ITEM_STRING_TO_ID(ICURS_TORN_NOTE_2)
		ITEM_STRING_TO_ID(ICURS_TORN_NOTE_3)
		ITEM_STRING_TO_ID(ICURS_RECONSTRUCTED_NOTE)
		ITEM_STRING_TO_ID(ICURS_RUNE_OF_FIRE)
		ITEM_STRING_TO_ID(ICURS_GREATER_RUNE_OF_FIRE)
		ITEM_STRING_TO_ID(ICURS_RUNE_OF_LIGHTNING)
		ITEM_STRING_TO_ID(ICURS_GREATER_RUNE_OF_LIGHTNING)
		ITEM_STRING_TO_ID(ICURS_RUNE_OF_STONE)
		ITEM_STRING_TO_ID(ICURS_GREY_SUIT)
		ITEM_STRING_TO_ID(ICURS_BROWN_SUIT)
		ITEM_STRING_TO_ID(ICURS_BOVINE)

		devilution::app_fatal("Invalid item graphic tpye! %s", str.c_str());
	    return ICURS_BOVINE;
	}

	item_misc_id ItemMisicIdFromText(std::string str)
    {
	    ITEM_STRING_TO_ID(IMISC_NONE)
	    ITEM_STRING_TO_ID(IMISC_USEFIRST)
	    ITEM_STRING_TO_ID(IMISC_FULLHEAL)
	    ITEM_STRING_TO_ID(IMISC_HEAL)
	    ITEM_STRING_TO_ID(IMISC_OLDHEAL)
	    ITEM_STRING_TO_ID(IMISC_DEADHEAL)
	    ITEM_STRING_TO_ID(IMISC_MANA)
	    ITEM_STRING_TO_ID(IMISC_FULLMANA)
	    ITEM_STRING_TO_ID(IMISC_POTEXP)
	    ITEM_STRING_TO_ID(IMISC_POTFORG)
	    ITEM_STRING_TO_ID(IMISC_ELIXSTR)
	    ITEM_STRING_TO_ID(IMISC_ELIXMAG)
	    ITEM_STRING_TO_ID(IMISC_ELIXDEX)
	    ITEM_STRING_TO_ID(IMISC_ELIXVIT)
	    ITEM_STRING_TO_ID(IMISC_ELIXWEAK)
	    ITEM_STRING_TO_ID(IMISC_ELIXDIS)
	    ITEM_STRING_TO_ID(IMISC_ELIXCLUM)
	    ITEM_STRING_TO_ID(IMISC_ELIXSICK)
	    ITEM_STRING_TO_ID(IMISC_REJUV)
	    ITEM_STRING_TO_ID(IMISC_FULLREJUV)
	    ITEM_STRING_TO_ID(IMISC_USELAST)
	    ITEM_STRING_TO_ID(IMISC_SCROLL)
	    ITEM_STRING_TO_ID(IMISC_SCROLLT)
	    ITEM_STRING_TO_ID(IMISC_STAFF)
	    ITEM_STRING_TO_ID(IMISC_BOOK)
	    ITEM_STRING_TO_ID(IMISC_RING)
	    ITEM_STRING_TO_ID(IMISC_AMULET)
	    ITEM_STRING_TO_ID(IMISC_UNIQUE)
	    ITEM_STRING_TO_ID(IMISC_FOOD)
	    ITEM_STRING_TO_ID(IMISC_OILFIRST)
	    ITEM_STRING_TO_ID(IMISC_OILOF)
	    ITEM_STRING_TO_ID(IMISC_OILACC)
	    ITEM_STRING_TO_ID(IMISC_OILMAST)
	    ITEM_STRING_TO_ID(IMISC_OILSHARP)
	    ITEM_STRING_TO_ID(IMISC_OILDEATH)
	    ITEM_STRING_TO_ID(IMISC_OILSKILL)
	    ITEM_STRING_TO_ID(IMISC_OILBSMTH)
	    ITEM_STRING_TO_ID(IMISC_OILFORT)
	    ITEM_STRING_TO_ID(IMISC_OILPERM)
	    ITEM_STRING_TO_ID(IMISC_OILHARD)
	    ITEM_STRING_TO_ID(IMISC_OILIMP)
	    ITEM_STRING_TO_ID(IMISC_OILLAST)
	    ITEM_STRING_TO_ID(IMISC_MAPOFDOOM)
	    ITEM_STRING_TO_ID(IMISC_EAR)
	    ITEM_STRING_TO_ID(IMISC_SPECELIX)
		ITEM_STRING_TO_ID(IMISC_0x2D)
		ITEM_STRING_TO_ID(IMISC_RUNEFIRST)
		ITEM_STRING_TO_ID(IMISC_RUNEF)
		ITEM_STRING_TO_ID(IMISC_RUNEL)
		ITEM_STRING_TO_ID(IMISC_GR_RUNEL)
		ITEM_STRING_TO_ID(IMISC_GR_RUNEF)
		ITEM_STRING_TO_ID(IMISC_RUNES)
		ITEM_STRING_TO_ID(IMISC_RUNELAST)
		ITEM_STRING_TO_ID(IMISC_AURIC)
		ITEM_STRING_TO_ID(IMISC_NOTE)

	    devilution::app_fatal("Invalid item misc tpye! %s", str.c_str());
	    return IMISC_NONE;
	}

	item_special_effect ItemSpecialEffectFromText(std::string str)
    {
		ITEM_STRING_TO_ID(ISPL_NONE)
		ITEM_STRING_TO_ID(ISPL_INFRAVISION)
		ITEM_STRING_TO_ID(ISPL_RNDSTEALLIFE)
		ITEM_STRING_TO_ID(ISPL_RNDARROWVEL)
		ITEM_STRING_TO_ID(ISPL_FIRE_ARROWS)
		ITEM_STRING_TO_ID(ISPL_FIREDAM)
		ITEM_STRING_TO_ID(ISPL_LIGHTDAM)
		ITEM_STRING_TO_ID(ISPL_DRAINLIFE)
		ITEM_STRING_TO_ID(ISPL_UNKNOWN_1)
		ITEM_STRING_TO_ID(ISPL_NOHEALPLR)
		ITEM_STRING_TO_ID(ISPL_MULT_ARROWS)
		ITEM_STRING_TO_ID(ISPL_UNKNOWN_3)
		ITEM_STRING_TO_ID(ISPL_KNOCKBACK)
		ITEM_STRING_TO_ID(ISPL_NOHEALMON)
		ITEM_STRING_TO_ID(ISPL_STEALMANA_3)
		ITEM_STRING_TO_ID(ISPL_STEALMANA_5)
		ITEM_STRING_TO_ID(ISPL_STEALLIFE_3)
		ITEM_STRING_TO_ID(ISPL_STEALLIFE_5)
		ITEM_STRING_TO_ID(ISPL_QUICKATTACK)
		ITEM_STRING_TO_ID(ISPL_FASTATTACK)
		ITEM_STRING_TO_ID(ISPL_FASTERATTACK)
		ITEM_STRING_TO_ID(ISPL_FASTESTATTACK)
		ITEM_STRING_TO_ID(ISPL_FASTRECOVER)
		ITEM_STRING_TO_ID(ISPL_FASTERRECOVER)
		ITEM_STRING_TO_ID(ISPL_FASTESTRECOVER)
		ITEM_STRING_TO_ID(ISPL_FASTBLOCK)
		ITEM_STRING_TO_ID(ISPL_LIGHT_ARROWS)
		ITEM_STRING_TO_ID(ISPL_THORNS)
		ITEM_STRING_TO_ID(ISPL_NOMANA)
		ITEM_STRING_TO_ID(ISPL_ABSHALFTRAP)
		ITEM_STRING_TO_ID(ISPL_UNKNOWN_4)
		ITEM_STRING_TO_ID(ISPL_3XDAMVDEM)
		ITEM_STRING_TO_ID(ISPL_ALLRESZERO)

		devilution::app_fatal("Invalid item special effect! %s", str.c_str());
	    return ISPL_NONE;
	}

	unique_base_item UniqueBaseItemFromText(std::string str)
    {
		ITEM_STRING_TO_ID(UITYPE_NONE)
	    ITEM_STRING_TO_ID(UITYPE_INVALID)
		ITEM_STRING_TO_ID(UITYPE_SHORTBOW)
		ITEM_STRING_TO_ID(UITYPE_LONGBOW)
		ITEM_STRING_TO_ID(UITYPE_HUNTBOW)
		ITEM_STRING_TO_ID(UITYPE_COMPBOW)
		ITEM_STRING_TO_ID(UITYPE_WARBOW)
		ITEM_STRING_TO_ID(UITYPE_BATTLEBOW)
		ITEM_STRING_TO_ID(UITYPE_DAGGER)
		ITEM_STRING_TO_ID(UITYPE_FALCHION)
		ITEM_STRING_TO_ID(UITYPE_CLAYMORE)
		ITEM_STRING_TO_ID(UITYPE_BROADSWR)
		ITEM_STRING_TO_ID(UITYPE_SABRE)
		ITEM_STRING_TO_ID(UITYPE_SCIMITAR)
		ITEM_STRING_TO_ID(UITYPE_LONGSWR)
		ITEM_STRING_TO_ID(UITYPE_BASTARDSWR)
		ITEM_STRING_TO_ID(UITYPE_TWOHANDSWR)
		ITEM_STRING_TO_ID(UITYPE_GREATSWR)
		ITEM_STRING_TO_ID(UITYPE_CLEAVER)
		ITEM_STRING_TO_ID(UITYPE_LARGEAXE)
		ITEM_STRING_TO_ID(UITYPE_BROADAXE)
		ITEM_STRING_TO_ID(UITYPE_SMALLAXE)
		ITEM_STRING_TO_ID(UITYPE_BATTLEAXE)
		ITEM_STRING_TO_ID(UITYPE_GREATAXE)
		ITEM_STRING_TO_ID(UITYPE_MACE)
		ITEM_STRING_TO_ID(UITYPE_MORNSTAR)
		ITEM_STRING_TO_ID(UITYPE_SPIKCLUB)
		ITEM_STRING_TO_ID(UITYPE_MAUL)
		ITEM_STRING_TO_ID(UITYPE_WARHAMMER)
		ITEM_STRING_TO_ID(UITYPE_FLAIL)
		ITEM_STRING_TO_ID(UITYPE_LONGSTAFF)
		ITEM_STRING_TO_ID(UITYPE_SHORTSTAFF)
		ITEM_STRING_TO_ID(UITYPE_COMPSTAFF)
		ITEM_STRING_TO_ID(UITYPE_QUARSTAFF)
		ITEM_STRING_TO_ID(UITYPE_WARSTAFF)
		ITEM_STRING_TO_ID(UITYPE_SKULLCAP)
		ITEM_STRING_TO_ID(UITYPE_HELM)
		ITEM_STRING_TO_ID(UITYPE_GREATHELM)
		ITEM_STRING_TO_ID(UITYPE_CROWN)
		ITEM_STRING_TO_ID(UITYPE_38)
		ITEM_STRING_TO_ID(UITYPE_RAGS)
		ITEM_STRING_TO_ID(UITYPE_STUDARMOR)
		ITEM_STRING_TO_ID(UITYPE_CLOAK)
		ITEM_STRING_TO_ID(UITYPE_ROBE)
		ITEM_STRING_TO_ID(UITYPE_CHAINMAIL)
		ITEM_STRING_TO_ID(UITYPE_LEATHARMOR)
		ITEM_STRING_TO_ID(UITYPE_BREASTPLATE)
		ITEM_STRING_TO_ID(UITYPE_CAPE)
		ITEM_STRING_TO_ID(UITYPE_PLATEMAIL)
		ITEM_STRING_TO_ID(UITYPE_FULLPLATE)
		ITEM_STRING_TO_ID(UITYPE_BUCKLER)
		ITEM_STRING_TO_ID(UITYPE_SMALLSHIELD)
		ITEM_STRING_TO_ID(UITYPE_LARGESHIELD)
		ITEM_STRING_TO_ID(UITYPE_KITESHIELD)
		ITEM_STRING_TO_ID(UITYPE_GOTHSHIELD)
		ITEM_STRING_TO_ID(UITYPE_RING)
		ITEM_STRING_TO_ID(UITYPE_55)
		ITEM_STRING_TO_ID(UITYPE_AMULET)
		ITEM_STRING_TO_ID(UITYPE_SKCROWN)
		ITEM_STRING_TO_ID(UITYPE_INFRARING)
		ITEM_STRING_TO_ID(UITYPE_OPTAMULET)
		ITEM_STRING_TO_ID(UITYPE_TRING)
		ITEM_STRING_TO_ID(UITYPE_HARCREST)
		ITEM_STRING_TO_ID(UITYPE_MAPOFDOOM)
		ITEM_STRING_TO_ID(UITYPE_ELIXIR)
		ITEM_STRING_TO_ID(UITYPE_ARMOFVAL)
		ITEM_STRING_TO_ID(UITYPE_STEELVEIL)
		ITEM_STRING_TO_ID(UITYPE_GRISWOLD)
		ITEM_STRING_TO_ID(UITYPE_LGTFORGE)
		ITEM_STRING_TO_ID(UITYPE_LAZSTAFF)
		ITEM_STRING_TO_ID(UITYPE_BOVINE)

			
		devilution::app_fatal("Invalid unique item type! %s", str.c_str());
	    return UITYPE_NONE;
	}

	goodorevil GoodOrEvilTypeFromString(std::string str)
    {
	    ITEM_STRING_TO_ID(GOE_ANY)
	    ITEM_STRING_TO_ID(GOE_EVIL)
	    ITEM_STRING_TO_ID(GOE_GOOD)
	    devilution::app_fatal("Invalid item good or evil type! %s", str.c_str());
	    return GOE_ANY;
	}

	item_effect_type ItemEffectTypeToString(std::string str)
    {
		ITEM_STRING_TO_ID(IPL_TOHIT)
		ITEM_STRING_TO_ID(IPL_TOHIT_CURSE)
		ITEM_STRING_TO_ID(IPL_DAMP)
		ITEM_STRING_TO_ID(IPL_DAMP_CURSE)
		ITEM_STRING_TO_ID(IPL_TOHIT_DAMP)
		ITEM_STRING_TO_ID(IPL_TOHIT_DAMP_CURSE)
		ITEM_STRING_TO_ID(IPL_ACP)
		ITEM_STRING_TO_ID(IPL_ACP_CURSE)
		ITEM_STRING_TO_ID(IPL_FIRERES)
		ITEM_STRING_TO_ID(IPL_LIGHTRES)
		ITEM_STRING_TO_ID(IPL_MAGICRES)
		ITEM_STRING_TO_ID(IPL_ALLRES)
		ITEM_STRING_TO_ID(IPL_SPLCOST)
		ITEM_STRING_TO_ID(IPL_SPLDUR)
		ITEM_STRING_TO_ID(IPL_SPLLVLADD)
		ITEM_STRING_TO_ID(IPL_CHARGES)
		ITEM_STRING_TO_ID(IPL_FIREDAM)
		ITEM_STRING_TO_ID(IPL_LIGHTDAM)
		ITEM_STRING_TO_ID(IPL_0x12)
		ITEM_STRING_TO_ID(IPL_STR)
		ITEM_STRING_TO_ID(IPL_STR_CURSE)
		ITEM_STRING_TO_ID(IPL_MAG)
		ITEM_STRING_TO_ID(IPL_MAG_CURSE)
		ITEM_STRING_TO_ID(IPL_DEX)
		ITEM_STRING_TO_ID(IPL_DEX_CURSE)
		ITEM_STRING_TO_ID(IPL_VIT)
		ITEM_STRING_TO_ID(IPL_VIT_CURSE)
		ITEM_STRING_TO_ID(IPL_ATTRIBS)
		ITEM_STRING_TO_ID(IPL_ATTRIBS_CURSE)
		ITEM_STRING_TO_ID(IPL_GETHIT_CURSE)
		ITEM_STRING_TO_ID(IPL_GETHIT)
		ITEM_STRING_TO_ID(IPL_LIFE)
		ITEM_STRING_TO_ID(IPL_LIFE_CURSE)
		ITEM_STRING_TO_ID(IPL_MANA)
		ITEM_STRING_TO_ID(IPL_MANA_CURSE)
		ITEM_STRING_TO_ID(IPL_DUR)
		ITEM_STRING_TO_ID(IPL_DUR_CURSE)
		ITEM_STRING_TO_ID(IPL_INDESTRUCTIBLE)
		ITEM_STRING_TO_ID(IPL_LIGHT)
		ITEM_STRING_TO_ID(IPL_LIGHT_CURSE)
		ITEM_STRING_TO_ID(IPL_0x28)
		ITEM_STRING_TO_ID(IPL_MULT_ARROWS)
		ITEM_STRING_TO_ID(IPL_FIRE_ARROWS)
		ITEM_STRING_TO_ID(IPL_LIGHT_ARROWS)
		ITEM_STRING_TO_ID(IPL_INVCURS)
		ITEM_STRING_TO_ID(IPL_THORNS)
		ITEM_STRING_TO_ID(IPL_NOMANA)
		ITEM_STRING_TO_ID(IPL_NOHEALPLR)
		ITEM_STRING_TO_ID(IPL_0x30)
		ITEM_STRING_TO_ID(IPL_0x31)
		ITEM_STRING_TO_ID(IPL_FIREBALL)
		ITEM_STRING_TO_ID(IPL_0x33)
		ITEM_STRING_TO_ID(IPL_ABSHALFTRAP)
		ITEM_STRING_TO_ID(IPL_KNOCKBACK)
		ITEM_STRING_TO_ID(IPL_NOHEALMON)
		ITEM_STRING_TO_ID(IPL_STEALMANA)
		ITEM_STRING_TO_ID(IPL_STEALLIFE)
		ITEM_STRING_TO_ID(IPL_TARGAC)
		ITEM_STRING_TO_ID(IPL_FASTATTACK)
		ITEM_STRING_TO_ID(IPL_FASTRECOVER)
		ITEM_STRING_TO_ID(IPL_FASTBLOCK)
		ITEM_STRING_TO_ID(IPL_DAMMOD)
		ITEM_STRING_TO_ID(IPL_RNDARROWVEL)
		ITEM_STRING_TO_ID(IPL_SETDAM)
		ITEM_STRING_TO_ID(IPL_SETDUR)
		ITEM_STRING_TO_ID(IPL_NOMINSTR)
		ITEM_STRING_TO_ID(IPL_SPELL)
		ITEM_STRING_TO_ID(IPL_FASTSWING)
		ITEM_STRING_TO_ID(IPL_ONEHAND)
		ITEM_STRING_TO_ID(IPL_3XDAMVDEM)
		ITEM_STRING_TO_ID(IPL_ALLRESZERO)
		ITEM_STRING_TO_ID(IPL_0x47)
		ITEM_STRING_TO_ID(IPL_DRAINLIFE)
		ITEM_STRING_TO_ID(IPL_RNDSTEALLIFE)
		ITEM_STRING_TO_ID(IPL_INFRAVISION)
		ITEM_STRING_TO_ID(IPL_SETAC)
		ITEM_STRING_TO_ID(IPL_ADDACLIFE)
		ITEM_STRING_TO_ID(IPL_ADDMANAAC)
		ITEM_STRING_TO_ID(IPL_FIRERESCLVL)
		ITEM_STRING_TO_ID(IPL_AC_CURSE)
		ITEM_STRING_TO_ID(IDI_LASTDIABLO)
		ITEM_STRING_TO_ID(IPL_FIRERES_CURSE)
		ITEM_STRING_TO_ID(IPL_LIGHTRES_CURSE)
		ITEM_STRING_TO_ID(IPL_MAGICRES_CURSE)
		ITEM_STRING_TO_ID(IPL_ALLRES_CURSE)
		ITEM_STRING_TO_ID(IPL_DEVASTATION)
		ITEM_STRING_TO_ID(IPL_DECAY)
		ITEM_STRING_TO_ID(IPL_PERIL)
		ITEM_STRING_TO_ID(IPL_JESTERS)
		ITEM_STRING_TO_ID(IPL_CRYSTALLINE)
		ITEM_STRING_TO_ID(IPL_DOPPELGANGER)
		ITEM_STRING_TO_ID(IPL_ACDEMON)
		ITEM_STRING_TO_ID(IPL_ACUNDEAD)
		ITEM_STRING_TO_ID(IPL_MANATOLIFE)
		ITEM_STRING_TO_ID(IPL_LIFETOMANA)
		ITEM_STRING_TO_ID(IPL_INVALID)

		devilution::app_fatal("Invalid item effect! %s", str.c_str());
	    return IPL_INVALID;
	}

	ItemData *AllItemsList;
    UItemStruct *UniqueItemList;
    PLStruct *ItemPrefixes;
    PLStruct *ItemSuffixes;

	#define ITEMDAT_STRING_TYPE_VALSHIFT(x) if (tokens[i] == #x) {  v |= x; continue; }

	int ItemTable_ParsePLIType(std::string str)
    {
	    std::vector<std::string> tokens = split(str, '|');
	    int v = 0;

	    if (tokens[0] == "0")
		    return 0;

	    for (int i = 0; i < tokens.size(); i++) {
		    ITEMDAT_STRING_TYPE_VALSHIFT(PLT_MISC)
		    ITEMDAT_STRING_TYPE_VALSHIFT(PLT_BOW)
		    ITEMDAT_STRING_TYPE_VALSHIFT(PLT_STAFF)
		    ITEMDAT_STRING_TYPE_VALSHIFT(PLT_WEAP)
		    ITEMDAT_STRING_TYPE_VALSHIFT(PLT_SHLD)
		    ITEMDAT_STRING_TYPE_VALSHIFT(PLT_ARMO)

		    devilution::app_fatal("Invalid pli type %s", tokens[i].c_str());
	    }

	    return v;
    }

	PLStruct *LoadMagicItemInfo(DataTable *dataTable)
    {
	    PLStruct *itemMagicInfo = new PLStruct[dataTable->NumRows()];

		for (int i = 0; i < dataTable->NumRows(); i++) {
		    itemMagicInfo[i].PLName = dataTable->GetValue("PLName", i);
		    itemMagicInfo[i].power.type = ItemEffectTypeToString(dataTable->GetValue("type", i));
		    itemMagicInfo[i].power.param1 = dataTable->GetInt("param1", i);
		    itemMagicInfo[i].power.param2 = dataTable->GetInt("param2", i);
		    itemMagicInfo[i].PLMinLvl = dataTable->GetInt("PLMinLvl", i);
		    itemMagicInfo[i].PLIType = ItemTable_ParsePLIType(dataTable->GetValue("PLIType", i));
		    itemMagicInfo[i].PLGOE = GoodOrEvilTypeFromString(dataTable->GetValue("PLGOE", i));
		    itemMagicInfo[i].PLDouble = dataTable->GetInt("PLDouble", i);
		    itemMagicInfo[i].PLOk = dataTable->GetInt("PLOk", i);
		    itemMagicInfo[i].minVal = dataTable->GetInt("minVal", i);
		    itemMagicInfo[i].maxVal = dataTable->GetInt("maxVal", i);
		    itemMagicInfo[i].multVal = dataTable->GetInt("multVal", i);
	    }

		return itemMagicInfo;
	}

	void InitItemTable(void)
    {
	    AllItemsList = new ItemData[itemsTable->NumRows()];
	    UniqueItemList = new UItemStruct[uniqueItemTable->NumRows()];

		ItemPrefixes = LoadMagicItemInfo(itemPrefixTable);
	    ItemSuffixes = LoadMagicItemInfo(itemSuffixTable);

		// Load in the unique item table.
		for (int i = 0; i < uniqueItemTable->NumRows(); i++) {
		    UniqueItemList[i].UIName = uniqueItemTable->GetValue("UIName", i);
		    UniqueItemList[i].UIItemId = UniqueBaseItemFromText(uniqueItemTable->GetValue("UIItemId", i));
		    UniqueItemList[i].UIMinLvl = uniqueItemTable->GetInt("UIMinLvl", i);
		    UniqueItemList[i].UINumPL = uniqueItemTable->GetInt("UINumPL", i);
		    UniqueItemList[i].UIValue = uniqueItemTable->GetInt("UIValue", i);

			for (int d = 0; d < 6; d++) {
			    char PowerTypeName[512];
			    char PowerParam1Name[512];
			    char PowerParam2Name[512];

				sprintf(PowerTypeName, "ItemPower%dType", d);
			    sprintf(PowerParam1Name, "ItemPower%dParam1", d);
			    sprintf(PowerParam2Name, "ItemPower%dParam2", d);

				UniqueItemList[i].powers[d].type = ItemEffectTypeToString(uniqueItemTable->GetValue(PowerTypeName, i));
			    UniqueItemList[i].powers[d].param1 = uniqueItemTable->GetInt(PowerParam1Name, i);
			    UniqueItemList[i].powers[d].param2 = uniqueItemTable->GetInt(PowerParam2Name, i);
			}
		}

		// Load in the base item table.
		for (int i = 0; i < itemsTable->NumRows(); i++) {
		    AllItemsList[i].iRnd = ItemDropRateFromText(itemsTable->GetValue("iRnd", i));
		    AllItemsList[i].iClass = ItemClassFromText(itemsTable->GetValue("iClass", i));
		    AllItemsList[i].iLoc = ItemEquipTypeFromText(itemsTable->GetValue("iLoc", i));
		    AllItemsList[i].iCurs = ItemCursorGraphicFromText(itemsTable->GetValue("iCurs", i));
		    AllItemsList[i].itype = ItemTypeFromText(itemsTable->GetValue("itype", i));
		    AllItemsList[i].iItemId = UniqueBaseItemFromText(itemsTable->GetValue("iItemId", i));
		    AllItemsList[i].iName = itemsTable->GetValue("iName", i);
		    AllItemsList[i].iSName = itemsTable->GetValue("iSName", i);
		    AllItemsList[i].iMinMLvl = itemsTable->GetInt("iMinMLvl", i);
		    AllItemsList[i].iDurability = itemsTable->GetInt("iDurability", i);
		    AllItemsList[i].iMinDam = itemsTable->GetInt("iMinDam", i);
		    AllItemsList[i].iMaxDam = itemsTable->GetInt("iMaxDam", i);
		    AllItemsList[i].iMinAC = itemsTable->GetInt("iMinAC", i);
		    AllItemsList[i].iMaxAC = itemsTable->GetInt("iMaxAC", i);
		    AllItemsList[i].iMinStr = itemsTable->GetInt("iMinStr", i);
		    AllItemsList[i].iMinMag = itemsTable->GetInt("iMinMag", i);
		    AllItemsList[i].iMinDex = itemsTable->GetInt("iMinDex", i);
		    AllItemsList[i].iFlags = ItemSpecialEffectFromText(itemsTable->GetValue("iFlags", i));
		    AllItemsList[i].iMiscId = ItemMisicIdFromText(itemsTable->GetValue("iMiscId", i));
		    AllItemsList[i].iSpell = SpellIdFromString(itemsTable->GetValue("iSpell", i));
		    AllItemsList[i].iUsable = itemsTable->GetInt("iUsable", i);
		    AllItemsList[i].iValue = itemsTable->GetInt("iValue", i);
		}
	}
} // namespace devilution
