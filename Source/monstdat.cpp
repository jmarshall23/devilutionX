/**
 * @file monstdat.cpp
 *
 * Implementation of all monster data.
 */
#include "items.h"
#include "monstdat.h"

#include "monster.h"
#include "textdat.h"
#include "utils/language.h"

#include "datatable.h"

namespace devilution {

/** Contains the data related to each monster ID. */
MonsterData *MonstersData;

#define BIND_MONSTER_VALUE(x) MonstersData[i].##x = monsterTable->GetValue(#x, i);
#define BIND_MONSTER_INT(x) MonstersData[i].##x = monsterTable->GetInt(#x, i);
#define BIND_MONSTER_INT_ARRAY(x) MonstersData[i].##x = monsterTable->GetInt(#x, i);

#define MONTABLE_STRING_TYPE(x) if (str == #x) {  return x; }
#define MONTABLE_STRING_TYPE_VALSHIFT(x) if (tokens[i] == #x) {  v |= x; continue; }

_mc_id MonsterTable_GetAIClassType(std::string str)
{
	MONTABLE_STRING_TYPE(MC_UNDEAD)
	MONTABLE_STRING_TYPE(MC_DEMON)
	MONTABLE_STRING_TYPE(MC_ANIMAL)

		
	devilution::app_fatal("Invalid monster class type %s", str.c_str());

	return MC_UNDEAD;
}

_mai_id MonsterTable_GetAIType(std::string str)
{
	MONTABLE_STRING_TYPE(AI_INVALID)
	MONTABLE_STRING_TYPE(AI_ZOMBIE)
	MONTABLE_STRING_TYPE(AI_FAT)
	MONTABLE_STRING_TYPE(AI_SKELSD)
	MONTABLE_STRING_TYPE(AI_SKELBOW)
	MONTABLE_STRING_TYPE(AI_SCAV)
	MONTABLE_STRING_TYPE(AI_RHINO)
	MONTABLE_STRING_TYPE(AI_GOATMC)
	MONTABLE_STRING_TYPE(AI_GOATBOW)
	MONTABLE_STRING_TYPE(AI_FALLEN)
	MONTABLE_STRING_TYPE(AI_MAGMA)
	MONTABLE_STRING_TYPE(AI_SKELKING)
	MONTABLE_STRING_TYPE(AI_BAT)
	MONTABLE_STRING_TYPE(AI_GARG)
	MONTABLE_STRING_TYPE(AI_CLEAVER)
	MONTABLE_STRING_TYPE(AI_SUCC)
	MONTABLE_STRING_TYPE(AI_SNEAK)
	MONTABLE_STRING_TYPE(AI_STORM)
	MONTABLE_STRING_TYPE(AI_FIREMAN)
	MONTABLE_STRING_TYPE(AI_GARBUD)
	MONTABLE_STRING_TYPE(AI_ACID)
	MONTABLE_STRING_TYPE(AI_ACIDUNIQ)
	MONTABLE_STRING_TYPE(AI_GOLUM)
	MONTABLE_STRING_TYPE(AI_ZHAR)
	MONTABLE_STRING_TYPE(AI_SNOTSPIL)
	MONTABLE_STRING_TYPE(AI_SNAKE)
	MONTABLE_STRING_TYPE(AI_COUNSLR)
	MONTABLE_STRING_TYPE(AI_MEGA)
	MONTABLE_STRING_TYPE(AI_DIABLO)
	MONTABLE_STRING_TYPE(AI_LAZARUS)
	MONTABLE_STRING_TYPE(AI_LAZHELP)
	MONTABLE_STRING_TYPE(AI_LACHDAN)
	MONTABLE_STRING_TYPE(AI_WARLORD)
	MONTABLE_STRING_TYPE(AI_FIREBAT)
	MONTABLE_STRING_TYPE(AI_TORCHANT)
	MONTABLE_STRING_TYPE(AI_HORKDMN)
	MONTABLE_STRING_TYPE(AI_LICH)
	MONTABLE_STRING_TYPE(AI_ARCHLICH)
	MONTABLE_STRING_TYPE(AI_PSYCHORB)
	MONTABLE_STRING_TYPE(AI_NECROMORB)
	MONTABLE_STRING_TYPE(AI_BONEDEMON)

	devilution::app_fatal("Invalid monster AI type %s", str.c_str());

	return AI_LICH;
}

int MonsterTable_ParseResistance(std::string str)
{
	std::vector<std::string> tokens = split(str, '|');
	int v = 0;

	if (tokens[0] == "0")
		return 0;


	for (int i = 0; i < tokens.size(); i++) {
		MONTABLE_STRING_TYPE_VALSHIFT(RESIST_MAGIC);
		MONTABLE_STRING_TYPE_VALSHIFT(RESIST_FIRE);
		MONTABLE_STRING_TYPE_VALSHIFT(RESIST_LIGHTNING);
		MONTABLE_STRING_TYPE_VALSHIFT(IMMUNE_MAGIC);
		MONTABLE_STRING_TYPE_VALSHIFT(IMMUNE_FIRE);
		MONTABLE_STRING_TYPE_VALSHIFT(IMMUNE_LIGHTNING);
		MONTABLE_STRING_TYPE_VALSHIFT(IMMUNE_NULL_40);
		MONTABLE_STRING_TYPE_VALSHIFT(IMMUNE_ACID);

		devilution::app_fatal("Invalid resistance type %s", tokens[i].c_str());
	}

	return v;
}

#define MONTABLE_LOOT_TO_ID(x)  if (tokens[1] == #x) {  v += x; return v; }
int MonsterTable_ParseLoot(std::string str)
{
	int v = 0;

	if (str == "0")
		return 0;

	if (str == "T_NODROP")
		return T_NODROP;

	std::vector<std::string> tokens = split(str, '+');

	if (tokens[0] == "T_UNIQ") {
		v += T_UNIQ;
	} else {
		devilution::app_fatal("Invalid resistance type %s", tokens[0].c_str());
	}

	MONTABLE_LOOT_TO_ID(UITEM_CLEAVER)
	MONTABLE_LOOT_TO_ID(UITEM_SKCROWN)
	MONTABLE_LOOT_TO_ID(UITEM_INFRARING)
	MONTABLE_LOOT_TO_ID(UITEM_OPTAMULET)
	MONTABLE_LOOT_TO_ID(UITEM_TRING)
	MONTABLE_LOOT_TO_ID(UITEM_HARCREST)
	MONTABLE_LOOT_TO_ID(UITEM_STEELVEIL)
	MONTABLE_LOOT_TO_ID(UITEM_ARMOFVAL)
	MONTABLE_LOOT_TO_ID(UITEM_GRISWOLD)
	MONTABLE_LOOT_TO_ID(UITEM_BOVINE)
	MONTABLE_LOOT_TO_ID(UITEM_RIFTBOW)
	MONTABLE_LOOT_TO_ID(UITEM_NEEDLER)
	MONTABLE_LOOT_TO_ID(UITEM_CELESTBOW)
	MONTABLE_LOOT_TO_ID(UITEM_DEADLYHUNT)
	MONTABLE_LOOT_TO_ID(UITEM_BOWOFDEAD)
	MONTABLE_LOOT_TO_ID(UITEM_BLKOAKBOW)
	MONTABLE_LOOT_TO_ID(UITEM_FLAMEDART)
	MONTABLE_LOOT_TO_ID(UITEM_FLESHSTING)
	MONTABLE_LOOT_TO_ID(UITEM_WINDFORCE)
	MONTABLE_LOOT_TO_ID(UITEM_EAGLEHORN)
	MONTABLE_LOOT_TO_ID(UITEM_GONNAGALDIRK)
	MONTABLE_LOOT_TO_ID(UITEM_DEFENDER)
	MONTABLE_LOOT_TO_ID(UITEM_GRYPHONCLAW)
	MONTABLE_LOOT_TO_ID(UITEM_BLACKRAZOR)
	MONTABLE_LOOT_TO_ID(UITEM_GIBBOUSMOON)
	MONTABLE_LOOT_TO_ID(UITEM_ICESHANK)
	MONTABLE_LOOT_TO_ID(UITEM_EXECUTIONER)
	MONTABLE_LOOT_TO_ID(UITEM_BONESAW)
	MONTABLE_LOOT_TO_ID(UITEM_SHADHAWK)
	MONTABLE_LOOT_TO_ID(UITEM_WIZSPIKE)
	MONTABLE_LOOT_TO_ID(UITEM_LGTSABRE)
	MONTABLE_LOOT_TO_ID(UITEM_FALCONTALON)
	MONTABLE_LOOT_TO_ID(UITEM_INFERNO)
	MONTABLE_LOOT_TO_ID(UITEM_DOOMBRINGER)
	MONTABLE_LOOT_TO_ID(UITEM_GRIZZLY)
	MONTABLE_LOOT_TO_ID(UITEM_GRANDFATHER)
	MONTABLE_LOOT_TO_ID(UITEM_MANGLER)
	MONTABLE_LOOT_TO_ID(UITEM_SHARPBEAK)
	MONTABLE_LOOT_TO_ID(UITEM_BLOODLSLAYER)
	MONTABLE_LOOT_TO_ID(UITEM_CELESTAXE)
	MONTABLE_LOOT_TO_ID(UITEM_WICKEDAXE)
	MONTABLE_LOOT_TO_ID(UITEM_STONECLEAV)
	MONTABLE_LOOT_TO_ID(UITEM_AGUHATCHET)
	MONTABLE_LOOT_TO_ID(UITEM_HELLSLAYER)
	MONTABLE_LOOT_TO_ID(UITEM_MESSERREAVER)
	MONTABLE_LOOT_TO_ID(UITEM_CRACKRUST)
	MONTABLE_LOOT_TO_ID(UITEM_JHOLMHAMM)
	MONTABLE_LOOT_TO_ID(UITEM_CIVERBS)
	MONTABLE_LOOT_TO_ID(UITEM_CELESTSTAR)
	MONTABLE_LOOT_TO_ID(UITEM_BARANSTAR)
	MONTABLE_LOOT_TO_ID(UITEM_GNARLROOT)
	MONTABLE_LOOT_TO_ID(UITEM_CRANBASH)
	MONTABLE_LOOT_TO_ID(UITEM_SCHAEFHAMM)
	MONTABLE_LOOT_TO_ID(UITEM_DREAMFLANGE)
	MONTABLE_LOOT_TO_ID(UITEM_STAFFOFSHAD)
	MONTABLE_LOOT_TO_ID(UITEM_IMMOLATOR)
	MONTABLE_LOOT_TO_ID(UITEM_STORMSPIRE)
	MONTABLE_LOOT_TO_ID(UITEM_GLEAMSONG)
	MONTABLE_LOOT_TO_ID(UITEM_THUNDERCALL)
	MONTABLE_LOOT_TO_ID(UITEM_PROTECTOR)
	MONTABLE_LOOT_TO_ID(UITEM_NAJPUZZLE)
	MONTABLE_LOOT_TO_ID(UITEM_MINDCRY)
	MONTABLE_LOOT_TO_ID(UITEM_RODOFONAN)
	MONTABLE_LOOT_TO_ID(UITEM_SPIRITSHELM)
	MONTABLE_LOOT_TO_ID(UITEM_THINKINGCAP)
	MONTABLE_LOOT_TO_ID(UITEM_OVERLORDHELM)
	MONTABLE_LOOT_TO_ID(UITEM_FOOLSCREST)
	MONTABLE_LOOT_TO_ID(UITEM_GOTTERDAM)
	MONTABLE_LOOT_TO_ID(UITEM_ROYCIRCLET)
	MONTABLE_LOOT_TO_ID(UITEM_TORNFLESH)
	MONTABLE_LOOT_TO_ID(UITEM_GLADBANE)
	MONTABLE_LOOT_TO_ID(UITEM_RAINCLOAK)
	MONTABLE_LOOT_TO_ID(UITEM_LEATHAUT)
	MONTABLE_LOOT_TO_ID(UITEM_WISDWRAP)
	MONTABLE_LOOT_TO_ID(UITEM_SPARKMAIL)
	MONTABLE_LOOT_TO_ID(UITEM_SCAVCARAP)
	MONTABLE_LOOT_TO_ID(UITEM_NIGHTSCAPE)
	MONTABLE_LOOT_TO_ID(UITEM_NAJPLATE)
	MONTABLE_LOOT_TO_ID(UITEM_DEMONSPIKE)
	MONTABLE_LOOT_TO_ID(UITEM_DEFLECTOR)
	MONTABLE_LOOT_TO_ID(UITEM_SKULLSHLD)
	MONTABLE_LOOT_TO_ID(UITEM_DRAGONBRCH)
	MONTABLE_LOOT_TO_ID(UITEM_BLKOAKSHLD)
	MONTABLE_LOOT_TO_ID(UITEM_HOLYDEF)
	MONTABLE_LOOT_TO_ID(UITEM_STORMSHLD)
	MONTABLE_LOOT_TO_ID(UITEM_BRAMBLE)
	MONTABLE_LOOT_TO_ID(UITEM_REGHA)
	MONTABLE_LOOT_TO_ID(UITEM_BLEEDER)
	MONTABLE_LOOT_TO_ID(UITEM_CONSTRICT)
	MONTABLE_LOOT_TO_ID(UITEM_ENGAGE)



	devilution::app_fatal("Invalid loot id!");
}

/**
 * Define what version a monster type is available in
 */
char *MonstAvailTbl;

_monster_availability MonsterAvailabilityFromString(std::string str)
{
	MONTABLE_STRING_TYPE(MAT_NEVER)
	MONTABLE_STRING_TYPE(MAT_ALWAYS)
	MONTABLE_STRING_TYPE(MAT_RETAIL)

	devilution::app_fatal("Invalid monster availability!");

	return MAT_NEVER;
}

_monster_id MonsterIdFromString(std::string str)
{
	MONTABLE_STRING_TYPE(MT_NZOMBIE)
	MONTABLE_STRING_TYPE(MT_BZOMBIE)
	MONTABLE_STRING_TYPE(MT_GZOMBIE)
	MONTABLE_STRING_TYPE(MT_YZOMBIE)
	MONTABLE_STRING_TYPE(MT_RFALLSP)
	MONTABLE_STRING_TYPE(MT_DFALLSP)
	MONTABLE_STRING_TYPE(MT_YFALLSP)
	MONTABLE_STRING_TYPE(MT_BFALLSP)
	MONTABLE_STRING_TYPE(MT_WSKELAX)
	MONTABLE_STRING_TYPE(MT_TSKELAX)
	MONTABLE_STRING_TYPE(MT_RSKELAX)
	MONTABLE_STRING_TYPE(MT_XSKELAX)
	MONTABLE_STRING_TYPE(MT_RFALLSD)
	MONTABLE_STRING_TYPE(MT_DFALLSD)
	MONTABLE_STRING_TYPE(MT_YFALLSD)
	MONTABLE_STRING_TYPE(MT_BFALLSD)
	MONTABLE_STRING_TYPE(MT_NSCAV)
	MONTABLE_STRING_TYPE(MT_BSCAV)
	MONTABLE_STRING_TYPE(MT_WSCAV)
	MONTABLE_STRING_TYPE(MT_YSCAV)
	MONTABLE_STRING_TYPE(MT_WSKELBW)
	MONTABLE_STRING_TYPE(MT_TSKELBW)
	MONTABLE_STRING_TYPE(MT_RSKELBW)
	MONTABLE_STRING_TYPE(MT_XSKELBW)
	MONTABLE_STRING_TYPE(MT_WSKELSD)
	MONTABLE_STRING_TYPE(MT_TSKELSD)
	MONTABLE_STRING_TYPE(MT_RSKELSD)
	MONTABLE_STRING_TYPE(MT_XSKELSD)
	MONTABLE_STRING_TYPE(MT_INVILORD)
	MONTABLE_STRING_TYPE(MT_SNEAK)
	MONTABLE_STRING_TYPE(MT_STALKER)
	MONTABLE_STRING_TYPE(MT_UNSEEN)
	MONTABLE_STRING_TYPE(MT_ILLWEAV)
	MONTABLE_STRING_TYPE(MT_LRDSAYTR)
	MONTABLE_STRING_TYPE(MT_NGOATMC)
	MONTABLE_STRING_TYPE(MT_BGOATMC)
	MONTABLE_STRING_TYPE(MT_RGOATMC)
	MONTABLE_STRING_TYPE(MT_GGOATMC)
	MONTABLE_STRING_TYPE(MT_FIEND)
	MONTABLE_STRING_TYPE(MT_BLINK)
	MONTABLE_STRING_TYPE(MT_GLOOM)
	MONTABLE_STRING_TYPE(MT_FAMILIAR)
	MONTABLE_STRING_TYPE(MT_NGOATBW)
	MONTABLE_STRING_TYPE(MT_BGOATBW)
	MONTABLE_STRING_TYPE(MT_RGOATBW)
	MONTABLE_STRING_TYPE(MT_GGOATBW)
	MONTABLE_STRING_TYPE(MT_NACID)
	MONTABLE_STRING_TYPE(MT_RACID)
	MONTABLE_STRING_TYPE(MT_BACID)
	MONTABLE_STRING_TYPE(MT_XACID)
	MONTABLE_STRING_TYPE(MT_SKING)
	MONTABLE_STRING_TYPE(MT_CLEAVER)
	MONTABLE_STRING_TYPE(MT_FAT)
	MONTABLE_STRING_TYPE(MT_MUDMAN)
	MONTABLE_STRING_TYPE(MT_TOAD)
	MONTABLE_STRING_TYPE(MT_FLAYED)
	MONTABLE_STRING_TYPE(MT_WYRM)
	MONTABLE_STRING_TYPE(MT_CAVSLUG)
	MONTABLE_STRING_TYPE(MT_DVLWYRM)
	MONTABLE_STRING_TYPE(MT_DEVOUR)
	MONTABLE_STRING_TYPE(MT_NMAGMA)
	MONTABLE_STRING_TYPE(MT_YMAGMA)
	MONTABLE_STRING_TYPE(MT_BMAGMA)
	MONTABLE_STRING_TYPE(MT_WMAGMA)
	MONTABLE_STRING_TYPE(MT_HORNED)
	MONTABLE_STRING_TYPE(MT_MUDRUN)
	MONTABLE_STRING_TYPE(MT_FROSTC)
	MONTABLE_STRING_TYPE(MT_OBLORD)
	MONTABLE_STRING_TYPE(MT_BONEDMN)
	MONTABLE_STRING_TYPE(MT_REDDTH)
	MONTABLE_STRING_TYPE(MT_LTCHDMN)
	MONTABLE_STRING_TYPE(MT_UDEDBLRG)
	MONTABLE_STRING_TYPE(MT_INCIN)
	MONTABLE_STRING_TYPE(MT_FLAMLRD)
	MONTABLE_STRING_TYPE(MT_DOOMFIRE)
	MONTABLE_STRING_TYPE(MT_HELLBURN)
	MONTABLE_STRING_TYPE(MT_STORM)
	MONTABLE_STRING_TYPE(MT_RSTORM)
	MONTABLE_STRING_TYPE(MT_STORML)
	MONTABLE_STRING_TYPE(MT_MAEL)
	MONTABLE_STRING_TYPE(MT_BIGFALL)
	MONTABLE_STRING_TYPE(MT_WINGED)
	MONTABLE_STRING_TYPE(MT_GARGOYLE)
	MONTABLE_STRING_TYPE(MT_BLOODCLW)
	MONTABLE_STRING_TYPE(MT_DEATHW)
	MONTABLE_STRING_TYPE(MT_MEGA)
	MONTABLE_STRING_TYPE(MT_GUARD)
	MONTABLE_STRING_TYPE(MT_VTEXLRD)
	MONTABLE_STRING_TYPE(MT_BALROG)
	MONTABLE_STRING_TYPE(MT_NSNAKE)
	MONTABLE_STRING_TYPE(MT_RSNAKE)
	MONTABLE_STRING_TYPE(MT_BSNAKE)
	MONTABLE_STRING_TYPE(MT_GSNAKE)
	MONTABLE_STRING_TYPE(MT_NBLACK)
	MONTABLE_STRING_TYPE(MT_RTBLACK)
	MONTABLE_STRING_TYPE(MT_BTBLACK)
	MONTABLE_STRING_TYPE(MT_RBLACK)
	MONTABLE_STRING_TYPE(MT_UNRAV)
	MONTABLE_STRING_TYPE(MT_HOLOWONE)
	MONTABLE_STRING_TYPE(MT_PAINMSTR)
	MONTABLE_STRING_TYPE(MT_REALWEAV)
	MONTABLE_STRING_TYPE(MT_SUCCUBUS)
	MONTABLE_STRING_TYPE(MT_SNOWWICH)
	MONTABLE_STRING_TYPE(MT_HLSPWN)
	MONTABLE_STRING_TYPE(MT_SOLBRNR)
	MONTABLE_STRING_TYPE(MT_COUNSLR)
	MONTABLE_STRING_TYPE(MT_MAGISTR)
	MONTABLE_STRING_TYPE(MT_CABALIST)
	MONTABLE_STRING_TYPE(MT_ADVOCATE)
	MONTABLE_STRING_TYPE(MT_GOLEM)
	MONTABLE_STRING_TYPE(MT_DIABLO)
	MONTABLE_STRING_TYPE(MT_DARKMAGE)
	MONTABLE_STRING_TYPE(MT_HELLBOAR)
	MONTABLE_STRING_TYPE(MT_STINGER)
	MONTABLE_STRING_TYPE(MT_PSYCHORB)
	MONTABLE_STRING_TYPE(MT_ARACHNON)
	MONTABLE_STRING_TYPE(MT_FELLTWIN)
	MONTABLE_STRING_TYPE(MT_HORKSPWN)
	MONTABLE_STRING_TYPE(MT_VENMTAIL)
	MONTABLE_STRING_TYPE(MT_NECRMORB)
	MONTABLE_STRING_TYPE(MT_SPIDLORD)
	MONTABLE_STRING_TYPE(MT_LASHWORM)
	MONTABLE_STRING_TYPE(MT_TORCHANT)
	MONTABLE_STRING_TYPE(MT_HORKDMN)
	MONTABLE_STRING_TYPE(MT_DEFILER)
	MONTABLE_STRING_TYPE(MT_GRAVEDIG)
	MONTABLE_STRING_TYPE(MT_TOMBRAT)
	MONTABLE_STRING_TYPE(MT_FIREBAT)
	MONTABLE_STRING_TYPE(MT_SKLWING)
	MONTABLE_STRING_TYPE(MT_LICH)
	MONTABLE_STRING_TYPE(MT_CRYPTDMN)
	MONTABLE_STRING_TYPE(MT_HELLBAT)
	MONTABLE_STRING_TYPE(MT_BONEDEMN)
	MONTABLE_STRING_TYPE(MT_ARCHLICH)
	MONTABLE_STRING_TYPE(MT_BICLOPS)
	MONTABLE_STRING_TYPE(MT_FLESTHNG)
	MONTABLE_STRING_TYPE(MT_REAPER)
	MONTABLE_STRING_TYPE(MT_NAKRUL)
	MONTABLE_STRING_TYPE(MT_INVALID)

	devilution::app_fatal("Invalid monster type! %s", str.c_str());

	return MT_INVALID;
}

UniqueMonsterPack UniqueMonsterPackFromString(std::string str)
{
	MONTABLE_STRING_TYPE(UniqueMonsterPack::None)
	MONTABLE_STRING_TYPE(UniqueMonsterPack::Independent)
	MONTABLE_STRING_TYPE(UniqueMonsterPack::Leashed)

	devilution::app_fatal("Invalid monster pack! %s", str.c_str());

	return UniqueMonsterPack::None;
}

_monster_id *MonstConvTbl;
UniqMonstStruct *UniqMonst;

void InitMonsterTable(void)
{
	MonstersData = new MonsterData[monsterTable->NumRows()];
	MonstAvailTbl = new char[monsterTable->NumRows()];
	UniqMonst = new UniqMonstStruct[uniqueMonsterTable->NumRows()];
	MonstConvTbl = new _monster_id[DunMonTable->NumRows()];

	for (int i = 0; i < uniqueMonsterTable->NumRows(); i++) {
		UniqMonst[i].mtype = MonsterIdFromString(uniqueMonsterTable->GetValue("mtype", i));		
		UniqMonst[i].mName = uniqueMonsterTable->GetValue("mName", i);
		UniqMonst[i].mTrnName = uniqueMonsterTable->GetValue("mTrnName", i);
		UniqMonst[i].mlevel = uniqueMonsterTable->GetInt("mlevel", i);
		UniqMonst[i].mmaxhp = uniqueMonsterTable->GetInt("mmaxhp", i);
		UniqMonst[i].mAi = MonsterTable_GetAIType(uniqueMonsterTable->GetValue("mAi", i));
		UniqMonst[i].mint = uniqueMonsterTable->GetInt("mint", i);
		UniqMonst[i].mMinDamage = uniqueMonsterTable->GetInt("mMinDamage", i);
		UniqMonst[i].mMaxDamage = uniqueMonsterTable->GetInt("mMaxDamage", i);
		UniqMonst[i].mMagicRes = MonsterTable_ParseResistance(uniqueMonsterTable->GetValue("mMagicRes", i));
		UniqMonst[i].monsterPack = UniqueMonsterPackFromString(uniqueMonsterTable->GetValue("monsterPack", i));
		UniqMonst[i].customHitpoints = uniqueMonsterTable->GetInt("customHitpoints", i);
		UniqMonst[i].customArmorClass = uniqueMonsterTable->GetInt("customArmorClass", i);
		UniqMonst[i].mtalkmsg = SpeechIdFromString(uniqueMonsterTable->GetValue("mtalkmsg", i));
	}

	for (int i = 0; i < DunMonTable->NumRows(); i++) {
		MonstConvTbl[i] = MonsterIdFromString(DunMonTable->GetValue("DunFileRemapId", i));
	}

	for (int i = 0; i < monsterTable->NumRows(); i++) {
		MonstAvailTbl[i] = (char)MonsterAvailabilityFromString(monsterTable->GetValue("Version", i));

		BIND_MONSTER_VALUE(mName);
		BIND_MONSTER_VALUE(GraphicType);
		BIND_MONSTER_VALUE(sndfile);
		BIND_MONSTER_VALUE(TransFile);
		BIND_MONSTER_INT(width);
		BIND_MONSTER_INT(mImage);
		BIND_MONSTER_INT(has_special);
		BIND_MONSTER_INT(snd_special);
		BIND_MONSTER_INT(has_trans);
		//BIND_MONSTER_INT(Frames[6]);
		//BIND_MONSTER_INT(Rate[6]);
		MonstersData[i].Frames[0] = monsterTable->GetInt("Frames0", i);
		MonstersData[i].Frames[1] = monsterTable->GetInt("Frames1", i);
		MonstersData[i].Frames[2] = monsterTable->GetInt("Frames2", i);
		MonstersData[i].Frames[3] = monsterTable->GetInt("Frames3", i);
		MonstersData[i].Frames[4] = monsterTable->GetInt("Frames4", i);
		MonstersData[i].Frames[5] = monsterTable->GetInt("Frames5", i);

		MonstersData[i].Rate[0] = monsterTable->GetInt("Rate0", i);
		MonstersData[i].Rate[1] = monsterTable->GetInt("Rate1", i);
		MonstersData[i].Rate[2] = monsterTable->GetInt("Rate2", i);
		MonstersData[i].Rate[3] = monsterTable->GetInt("Rate3", i);
		MonstersData[i].Rate[4] = monsterTable->GetInt("Rate4", i);
		MonstersData[i].Rate[5] = monsterTable->GetInt("Rate5", i);

		BIND_MONSTER_INT(mMinDLvl);
		BIND_MONSTER_INT(mMaxDLvl);
		BIND_MONSTER_INT(mLevel);
		BIND_MONSTER_INT(mMinHP);
		BIND_MONSTER_INT(mMaxHP);
		//BIND_MONSTER_INT(mAi);
		MonstersData[i].mAi = MonsterTable_GetAIType(monsterTable->GetValue("mAi", i));
		BIND_MONSTER_INT(mFlags);
		BIND_MONSTER_INT(mInt);
		BIND_MONSTER_INT(mHit);
		BIND_MONSTER_INT(mAFNum);
		BIND_MONSTER_INT(mMinDamage);
		BIND_MONSTER_INT(mMaxDamage);
		BIND_MONSTER_INT(mHit2);
		BIND_MONSTER_INT(mAFNum2);
		BIND_MONSTER_INT(mMinDamage2);
		BIND_MONSTER_INT(mMaxDamage2);
		BIND_MONSTER_INT(mArmorClass);
		//BIND_MONSTER_INT(mMonstClass);
		MonstersData[i].mMonstClass = MonsterTable_GetAIClassType(monsterTable->GetValue("mMonstClass", i));
		MonstersData[i].mMagicRes = MonsterTable_ParseResistance(monsterTable->GetValue("mMagicRes", i));
		MonstersData[i].mMagicRes2 = MonsterTable_ParseResistance(monsterTable->GetValue("mMagicRes", i));		
		BIND_MONSTER_INT(mSelFlag);
		//BIND_MONSTER_INT(mTreasure);
		MonstersData[i].mTreasure = MonsterTable_ParseLoot(monsterTable->GetValue("mTreasure", i));		
		BIND_MONSTER_INT(mExp);
	}
}

} // namespace devilution
